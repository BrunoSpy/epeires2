<?php
// 4 cas :
// * nouvel évènement vierge : $this->event, $this->model, $this->copy : null
// * nouvel évènement via copie d'un evt : $this->event not null && $this->copy = true
// * nouvel évènement via instantiation d'un modèle : $this->model not null
// * modification d'un évènement : $this->event not null && $this->copy = false

	if($this->event && !$this->copy){
		//form de modif
		$this->form->setAttributes(array(
		'action' => $this->url('application', array('controller'=>'events', 'action'=>'modify', 'id'=>$this->event->getId())),
		'class' => 'form-horizontal'));
	} else {
		//form de creation
		$this->form->setAttributes(array(
		'action' => $this->url('application', array('controller'=>'events', 'action'=>'create')),
		'class' => 'form-horizontal'));
	}
        
	if($this->isGranted('events.status')){
            $this->form->setAttributes(array('data-modstatus' => true));
        }
        
	$this->form->prepare();
	echo $this->form()->openTag($this->form);
	echo $this->formHidden($this->form->get('id'));
	echo $this->formHidden($this->form->get('category'));
	?>


	
	<div class="accordion" id="form">
		<?php 
		//category and subcategory		
		$formSelectCat = $this->form->get('categories')->get('root_categories');
		$formSelectSubCat = $this->form->get('categories')->get('subcategories');
 		if($this->event || $this->model){
			//Catégorie non modifiale si modification
			$formSelectCat->setAttribute('disabled',true);
			$formSelectSubCat->setAttribute('disabled', true);
 		}
		
		$html = $this->controlGroup(
					$this->formLabel($this->form->get('categories')->get('root_categories')->setLabelAttributes(array('class'=>'control-label'))),
					$this->formSelect($formSelectCat));
		$html .= $this->controlGroup(
					$this->formLabel($this->form->get('categories')->get('subcategories')->setLabelAttributes(array('class'=>'control-label'))),
					$this->formSelect($formSelectSubCat),
					array('control_id'=>'form_categories'));		
		
		$catTitle = "Catégories";
		
		if($this->event) {
			$catTitle .= " : ".($this->event->getCategory()->getParent() ? 
									$this->event->getCategory()->getParent()->getName() . " > ".$this->event->getCategory()->getName() :
									$this->event->getCategory()->getName());
		}
		
		if($this->model) {
			$catTitle .= " : ".($this->model->getCategory()->getParent() ?
					$this->model->getCategory()->getParent()->getName() . " > ".$this->model->getCategory()->getName() :
					$this->model->getCategory()->getName());
		}
		
		echo $this->accordionGroup($catTitle, $html, array('in'=>($this->event ? false : true), 'inner-id'=>'category', 'data-parent'=>'form', 'title_id'=>'category_title', 'body-id' => "Catégories"));
 
		//Modèles uniquement si création
		if(!$this->event && !$this->model){
			echo $this->accordionGroup("Modèles", "Aucun modèle défini.", array('data-parent'=>'form', 'inner-id'=> 'predefined_events'));
		}
                
                $html = $this->controlGroup(
					$this->formLabel($this->form->get('scheduled')->setLabelAttributes(array('class'=>'control-label'))),
					$this->formCheckbox($this->form->get('scheduled')), 
                                                            array('class'=>'compact' . ($this->isGranted('events.schedule') ? '' :' unvisible')));
                
		$html .= $this->controlGroup(
					$this->formLabel($this->form->get('punctual')->setLabelAttributes(array('class'=>'control-label'))),
					$this->formCheckbox($this->form->get('punctual')), array('class'=>'compact'));
		
		$html .= $this->controlGroup(
				$this->formLabel($this->form->get('startdate')->setLabelAttributes(array('class'=>'control-label time-middle'))),
				$this->formInput($this->form->get('startdate')), array('class'=>'compact'));
		
		$formEndDate = $this->form->get('enddate');
		if($this->event){
			if($this->event->isPunctual()){
				$formEndDate->setAttribute('disabled', true);
			}
		}
		if($this->model){
			if($this->model->isPunctual()){
				$formEndDate->setAttribute('disabled', true);
			}
		}
		
		$html .= $this->controlGroup(
				$this->formLabel($formEndDate->setLabelAttributes(array('class'=>'control-label time-middle'))),
				$this->formInput($formEndDate), array('class'=>'compact'));
		                
		echo $this->accordionGroup("Horaires",$html, array('data-parent'=>'form'));
		
		echo $this->formSelect($this->form->get('organisation')->setAttribute('class', 'unvisible'));
		

		$html = "<div id=\"custom_fields\">";
		if($this->event || $this->model){
			foreach ($this->form->get('custom_fields')->getElements() as $element){
				$html .= $this->customFieldGroup($element);
			}
		} 
		$html .= "</div>";
		$html .= "<div style=\"display:none;\">";
                $html .= $this->controlGroup(
				$this->formLabel($this->form->get('impact')->setLabelAttributes(array('class'=>'control-label'))),
				$this->formSelect($this->form->get('impact')));
		if($this->form->has('zonefilters')){
			$html .= $this->controlGroup(
					$this->formLabel($this->form->get('zonefilters')->setLabelAttributes(array('class'=>'control-label'))),
					$this->formSelect($this->form->get('zonefilters')));
		}
                $html .= "</div>";
		echo $this->accordionGroup("Description", $html, array('in' => ($this->event ? true : false), 'data-parent'=>'form'));
		
		$titleclass="";	
		$html = "";	
		$countalarm = 0;
		$mod = !$this->event || ($this->event && ($this->isGranted('events.write') || ($this->zfcUserIdentity() && $this->event->getAuthor()->getId() == $this->zfcUserIdentity()->getId())));

		$html .= '<table class="table table-hover" id="alarm-table">';
		if($this->event || $this->model){
                    $formatter = \IntlDateFormatter::create(
                                \Locale::getDefault(),
                                \IntlDateFormatter::FULL,
                                \IntlDateFormatter::FULL,
                                'UTC',
                                \IntlDateFormatter::GREGORIAN,
                                'HH:mm');
                    $formatterLong = \IntlDateFormatter::create(
                                \Locale::getDefault(),
                                \IntlDateFormatter::FULL,
                                \IntlDateFormatter::FULL,
                                'UTC',
                                \IntlDateFormatter::GREGORIAN,
                                'd-MM-y HH:mm');
                    $alarms = ($this->event ? $this->event->getChildren() : $this->model->getChildren());
                    foreach($alarms as $child) {
				if($child->getCategory() instanceof Application\Entity\AlarmCategory){
                                    $countalarm++;
                                    $now = new \DateTime();
                                    $now->setTimezone(new \DateTimeZone("UTC"));
                                    $deltabegin = "";
                                    $deltaend = "";
                                    foreach ($child->getCustomFieldsValues() as $value){
                                        if($value->getCustomField()->getId() == $child->getCategory()->getDeltaBeginField()->getId()){
                                            $deltabegin = $value->getValue();
                                        }
                                        if($value->getCustomField()->getId() == $child->getCategory()->getDeltaEndField()->getId()){
                                            $deltaend = $value->getValue();
                                        }
                                        if($value->getCustomField()->getId() == $child->getCategory()->getTextfield()->getId()){
                                            $alarmcomment = nl2br($value->getValue());
                                        }
                                    }
                                    if($this->copy || $this->model) {
                                        $timeAlert = clone $now;
                                        
                                        //diff in minutes
                                        $diff = 0;
                                        if($this->copy && strlen(trim($deltabegin)) == 0 && strlen(trim($deltaend)) == 0){ //calculate delta relative to startdate
                                            
                                            $diff = (int)(($child->getStartdate()->getTimestamp() - $this->event->getStartDate()->getTimestamp())/60);
                                        } else {//use deltas
                                            if(strlen(trim($deltaend)) > 0 && $this->event->getEnddate() != null) {
                                                $timeAlert = clone $this->event->getEnddate();
                                                $diff = $deltaend;
                                            } else if(strlen(trim($deltabegin)) > 0) {
                                                $timeAlert = clone $this->event->getStartdate();
                                                $diff = $deltabegin;
                                            }
                                        }
                                        if($diff > 0) {
                                            $timeAlert->add(new \DateInterval('PT'.$diff.'M'));
                                        } else {
                                            $invdiff = -$diff;
                                            $interval = new \DateInterval('PT'.$invdiff.'M');
                                            $interval->invert = 1;
                                            $timeAlert->add($interval);
                                        }                                      
                                        
                                        $html .= '<tr><div class="alarm-fake" '
                                                    . 'data-deltabegin="'.$deltabegin.'" '
                                                    . 'data-deltaend="'.$deltaend.'" '
                                                    . 'id="alarm-fake-'.$countalarm.'">'
                                                . '<input type="hidden" name="alarm['.$countalarm.'][date]" value="'.$formatterLong->format($timeAlert).'"></input>'
                                                . '<input type="hidden" name="alarm['.$countalarm.'][name]" value="'.$this->eventName($child).'"></input>'
                                                . '<input type="hidden" name="alarm['.$countalarm.'][comment]" value="'.$alarmcomment.'"></input>'
                                                . '<input type="hidden" name="alarm['.$countalarm.'][deltabegin]" value="'.$deltabegin.'"></input>'
                                                . '<input type="hidden" name="alarm['.$countalarm.'][comment]" value="'.$deltaend.'"></input>'
                                                . '</div></tr>';
                                        
                                        $html .= '<tr class="alarm-fake" data-id="fake-'.$countalarm.'">'
                                                . '<td><i class="icon-bell"></i></td>'
                                                . '<td>'.$formatter->format($timeAlert).'</td>'
                                                . '<td>'.$this->eventName($child).'</td>'
                                                . '<td><a class="delete-fake-alarm" href="#"><i class="icon-trash"></i></a></td>'
                                                . '</tr>';
                                        
                                    } else {
					$html .= '<tr id="tr-'.$child->getId().'" data-id="'.$child->getId().'" '
                                                . 'data-deltabegin="'.$deltabegin.'" '
                                                . 'data-deltaend="'.$deltaend.'" '
                                                .'>';
					if($child->getStatus()->isOpen()){
						if($child->getStartDate() < $now) {
							$html .= '<td><i class="icon-warning-sign"></i></td>';
						} else {
							$html .= '<td><i class="icon-bell"></i></td>';
						}
                                        } else if($child->getStatus()->getId() == 4) {
                                            $html .= '<td><i class="icon-remove"></i></td>';
                                        } else {
						if($child->getStartDate() < $now) {
							$html .= '<td><i class="icon-ok"></i></td>';
						} else {
							$html .= '<td><i class="icon-warning-sign"></i></td>';
						}
					}
                                        $html .= '<td>'.$formatter->format($child->getStartDate()).'</td>';
					$html .= '<td>'.$this->eventname($child).'</td>';
					$html .= '<td><a class="modify-alarm" href="#add-alarm" data-toggle="modal"><i class="icon-pencil"></i></a> <a class="delete-alarm" href="#"><i class="icon-trash"></i></a></td>';
					$html .= "</tr>";
                                    }
				}
			}
		}
		$html .= '</table>';
		if($mod){
			$html .= "<a id=\"addalarm\" href=\"#add-alarm\" data-toggle=\"modal\" class=\"btn btn-small pull-right\"><i class=\"icon-plus\"></i></a>";
		}
		
		echo $this->accordionGroup("Mémos <span class=\"badge pull-right\">".$countalarm."</span>", $html, array('data-parent'=>'form', 'title_id' => "alarmTitle"));
		
		$titleclass="";	
		$html = "";	
		$countfiles = 0;
		$mod = false;
                $html = '<table class="table table-hover" id="file-table">';
		$html .= '<tbody>';
		if($this->event || $this->model){
			$files = null;
                        if($this->event) {
                            $files = $this->event->getFiles();
                        }
                        if($this->model) {
                            $files = $this->model->getFiles();
                        }
			
			if($this->zfcUserIdentity()){
                            if($this->event) {
                                $mod = ($this->event->getAuthor()->getId() == $this->zfcUserIdentity()->getId()) || ($this->isGranted('events.write'));
                            } else {
                                //pas de modification possible d'un modèle
                                $mod = false;
                            }
			}
                        
			if(count($files) > 0){
				$countfiles = count($files);
				//accéder aux fichiers
				
				foreach ($files as $file){
					$html .= "<tr id=\"file_".$file->getId()."\">";
					$html .= "<td>".($file->getReference() ? "#".$file->getReference() : "N/A")."</td>";
					$html .= "<td><a href=\"".$this->basePath().$file->getPath()."\" rel=\"external\">".
								($file->getName() ? $file->getname() : $file->getFilename())."</a></td>";
					$html .= "<td>";
					$html .= "<a href=\"".$this->basePath().$file->getPath()."\" rel=\"external\"><i class=\"icon-download\"></i></a>";
					$html .= "</td>";
					if($mod){//suppression d'un fichier possible si le fichier ne vient pas d'un modèle ou si droits ok
						$html .= "<td>";
						//TODO
						//$html .= "<a href=\"#\"><i class=\"icon-pencil mod-file\"></i></a> ";
						$html .= "<a href=\"#confirm-delete-file\"
									class=\"delete-file\"
									data-href=\"".$this->url('application', 
												array('controller'=>'events', 'action' => 'deletefile'),
												array('query'=>array('id'=>$file->getId(), 'eventid' => $event->getId())))."\"
									data-id=\"".$file->getId()."\"
									data-name=\"".($file->getName() ? $file->getname() : $file->getFilename())."\"
									data-toggle=\"modal\"
									><i class=\"icon-trash\"></i></a>";
						$html .= "</td>";
					}
					$html .= "</tr>";
                                        if($this->copy || $this->model){ //ajout de l'input caché pour enregistrement
                                            $html .= '<tr><input type="hidden" name="fichiers['.$file->getId().']" value="'.$file->getId().'"></input></tr>';
                                        }
				}
				
			} 
                        
			if(!$mod && count($files) == 0){
				$titleclass = "disabled";
				$html = "";
			}
		}
                $html .= '</tbody>';
		$html .= '</table>';
		//ajout de fichier si nouvel evt ou mod avec droits ok
		if(!$this->event || $this->model || ($this->event && $mod)){
			$html .= "<a id=\"addfile\" href=\"#add-file\" data-toggle=\"modal\" class=\"btn btn-small pull-right\"><i class=\"icon-plus\"></i></a>";
		}
		
		echo $this->accordionGroup("Fichiers <span class=\"pull-right badge\">".$countfiles."</span>", $html, array('data-parent'=>'form', 'title_id'=>'filesTitle', 'title_class'=>$titleclass));
		
		
		$html = "";
		$actionsClass = "";
                $countactions = 0;
		if($this->event || $this->model) {
			if($this->copy){
				echo "<input type=\"hidden\" name=\"fromeventid\" value=\"".$this->copy."\">";
			}
			$children = null;
			if($this->event){
				$children = $this->event->getChildren();
			} else if ($this->model){
				$children = $this->model->getChildren();
			}
			if(count($children) > 0){
				$html .= '<table class="table table-hover" >';
				$html .= '<tbody>';
                                foreach ($children as $child){
                                    if($child->getCategory() instanceof Application\Entity\ActionCategory){
                                        $countactions++;
					$html .= "<tr data-id=\"".$child->getId()."\"";
                                        foreach ($child->getCustomFieldsValues() as $value){
                                            if($value->getCustomField()->getId() == $child->getCategory()->getTextField()->getId()){
                                                if($value->getValue() !== ''){
                                                    $html .= ' data-container="body" '
                                                            . 'data-html="true" '
                                                            . 'data-toggle="tooltip" '
                                                            . 'title="<span class=elmt_tooltip>'.nl2br($value->getValue()).'</span>"';
                                                }
                                            }
                                        }
                                        $html .= ">";
					$html .= "<td><span class=\"label label-".$child->getImpact()->getStyle()."\">".$child->getImpact()->getName()."</span></td>";
					$html .= "<td>".$this->eventName($child)."</td>";
					if(!$this->copy && !$this->model){ //copie d'un évènement -> pas de modif de la ficher réflexe
						$html .= "<td><a class=\"fiche btn btn-small ".($child->getStatus()->isOpen()? "" : "active")."\" data-id=\"".$child->getId()."\">".($child->getStatus()->isOpen()? "A faire" : "Fait")."</a></td>";
					}
					$html .= '</tr>';
                                    }
                                }
                                $html .= '</tbody>';
				$html .= '</table>';
                                if($this->model){
                                    //ajout de la référence pour copie des actions lors de l'enregistrement
                                    $html .= '<input name="modelid" type="hidden" value="'.$this->model->getId().'" >';
                                }
			} else {
				$actionsClass="disabled";
			}
		}
		echo $this->accordionGroup("Fiche réflexe <span class=\"pull-right badge\">".$countactions."</span>", $html, array('data-parent'=>'form', 'title_id'=>'actionsTitle', 'title_class'=>$actionsClass));
		
                //en cas de modif, afficher les notes
                if($this->event){
                    $formatterNote = \IntlDateFormatter::create(\Locale::getDefault(),
                        \IntlDateFormatter::FULL,
                        \IntlDateFormatter::FULL,
                        'UTC',
                        \IntlDateFormatter::GREGORIAN,
                        'dd LLL, HH:mm');
                    $html = '<div id="form-notes">';
                    foreach ($this->event->getUpdates() as $update){
                        $html .= "<blockquote>"
                                . "<p><span class=\"note\" data-id=\"".$update->getId()."\">". nl2br($update->getText()) ."</span></p>"
                                . "<small>".$this->updateAuthor($update)." à ".$formatterNote->format($update->getCreatedOn())."</small>"
                                . "</blockquote>";
                        
                        //$html .= '<dt>' . $formatterNote->format($update->getCreatedOn()) . ' UTC (' . $this->updateAuthor($update) . ')</dt>';
                        //$html .= '<dd>';
                        //$html .= '<span class="note" data-id="' . $update->getId() . '">' . nl2br($update->getText()) . '</span>';
                        //$html .= '</dd>';
                    }
                    $html .='</div>';
                    //ajout de notes si droits ok
                    if($mod){
			$html .= "<a data-id=\"".$this->event->getId()."\" id=\"addnote\" href=\"#add-note-modal\" data-toggle=\"modal\" class=\"btn btn-small pull-right\"><i class=\"icon-plus\"></i></a>";
                    }
                    
                    echo $this->accordionGroup('Notes <span class="pull-right badge">'.count($this->event->getUpdates()).'</span>', $html, array('data-parent' => 'form', 'title_id' => 'notesTitle'));
                }
                
		?>

	<div class="control-group">
		<?php echo $this->formLabel($this->form->get('status')->setLabelAttributes(array('class'=>'control-label'))); ?>
		<div class="controls">
			<?php 
			if($this->isGranted('events.status')) {
				echo $this->formSelect($this->form->get('status'));
			} else {
				echo $this->formSelect($this->form->get('status')->setAttribute('disabled', 'disabled'));
			} 
			?>
		</div>
	</div>
	
	<div class="control-group">
		<div class="controls">
                    <div style="display:inline-block; position:relative;">
			<?php	
			if($this->event || $this->model){
				echo $this->formSubmit($this->form->get('submit')->setAttribute('value', (($this->copy || $this->model) ? "Ajouter" : "Enregistrer")));
			} else {
				echo $this->formSubmit($this->form->get('submit')->setAttribute('disabled', 'disabled'));
			}?>
                    </div>
			<a class="btn" id="cancel-form">Annuler</a>
		</div>
	</div>	
	<?php echo $this->form()->closeTag(); ?>
