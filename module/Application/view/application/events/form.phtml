<?php
// 4 cas :
// * nouvel évènement vierge : $this->event, $this->model, $this->copy : null
// * nouvel évènement via copie d'un evt : $this->event not null && $this->copy = true
// * nouvel évènement via instantiation d'un modèle : $this->model not null
// * modification d'un évènement : $this->event not null && $this->copy = false

if($this->event && !$this->copy){
    //form de modif
    $this->form->setAttributes(array(
        'action' => $this->url('application', array('controller'=>'events', 'action'=>'modify', 'id'=>$this->event->getId())),
        'class' => 'form-horizontal'));
} else {
    //form de creation
    $this->form->setAttributes(array(
        'action' => $this->url('application', array('controller'=>'events', 'action'=>'create')),
        'class' => 'form-horizontal'));
}

if($this->isGranted('events.confirme')){
    $this->form->setAttributes(array('data-confirmauto' => true));
}

$this->form->prepare();
echo $this->form()->openTag($this->form);
echo $this->formHidden($this->form->get('id'));
echo $this->formHidden($this->form->get('category'));
?>

<div class="modal-body">
    <ul class="nav nav-tabs" role="tablist" id="form-tabs">
        <li role="presentation" class="active" id="cat-title">
            <a href="#categories-tab" data-toggle="tab">
                <div class="round round-sm blue"><span data-class="tags" class="glyphicon glyphicon-tags"></span></div> Catégories et modèles
            </a>
        </li>
        <li role="presentation" id="hours-title">
            <a href="#hours-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="time" class="glyphicon glyphicon-time"></span></div> Horaires</a>
        </li>
        <li role="presentation" id="description-title">
            <a href="#description-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="folder-open" class="glyphicon glyphicon-folder-open"></span></div> Description</a>
        </li>
        <li role="presentation" id="memos-title">
            <a href="#memos-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="bell" class="glyphicon glyphicon-bell"></span></div> Mémos<span class="badge ext">0</span></a>
        </li>
        <li role="presentation" id="files-title">
            <a href="#files-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="file" class="glyphicon glyphicon-file"></span></div> Fichiers<span class="badge ext">0</span></a>
        </li>
        <li role="presentation" id="actions-title">
            <a href="#actions-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="tasks" class="glyphicon glyphicon-tasks"></span></div> Fiche réflèxe<span class="badge ext">0</span></a>
        </li>
        <li role="presentation" id="notes-title">
            <a href="#notes-tab" data-toggle="tab" class="disabled"><div class="round round-sm grey"><span data-class="edit" class="glyphicon glyphicon-edit"></span></div> Notes<span class="badge ext">0</span></a>
        </li>
    </ul>

    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="categories-tab">
            <?php
            //category and subcategory
            $formSelectCat = $this->form->get('categories')->get('root_categories');
            $formSelectCat->setAttribute('required', true);
            $formSelectSubCat = $this->form->get('categories')->get('subcategories');
            if($this->event || $this->model){
                //Catégorie non modifiable si modification
                $formSelectCat->setAttribute('disabled',true);
                $formSelectSubCat->setAttribute('disabled', true);
            }

            echo $this->controlGroup($formSelectCat, array('large' => true));
            echo $this->controlGroup($formSelectSubCat, array('control_id'=>'form_categories', 'large' => true));
            //Modèles uniquement si création
            if(!$this->event && !$this->model){
                echo '<div class="form-group">';
                echo '<label class="col-sm-2 control-label">Modèles</label>';
                echo '<div class="container-fluid col-sm-10" id="predefined_events">';

                echo '</div>';
                echo '</div>';
            }

            ?>

        </div>

        <div role="tabpanel" class="tab-pane fade" id="hours-tab">
            <?php
            echo $this->controlGroup($this->form->get('scheduled'),
                array('class'=>($this->isGranted('events.schedule') ? '' :' unvisible'), 'large' => true));

            echo $this->controlGroup($this->form->get('punctual'), array('large' => true));

            echo $this->controlGroup($this->form->get('startdate'), array('class'=>'compact', 'labelclass' => 'time-middle', 'large' => true));

            $formEndDate = $this->form->get('enddate');
            if($this->event){
                if($this->event->isPunctual()){
                    $formEndDate->setAttribute('disabled', true);
                }
            }
            if($this->model){
                if($this->model->isPunctual()){
                    $formEndDate->setAttribute('disabled', true);
                }
                $formEndDate->setAttribute('data-duration', $this->model->getDuration());
            }

            echo $this->controlGroup($formEndDate, array('class'=>'compact', 'labelclass' => 'time-middle', 'large' => true));
            ?>

            <?php if($this->isGranted('events.recurrent') && (($this->event && $this->event->getRecurrence()) || !$this->event)): ?>
                <div class="form-group">
                    <label class="control-label col-sm-2">Répétitions :</label>
                    <div class="col-sm-10 col-lg-8">
                        <a class="btn btn-sm btn-raised" id="recurr-button" data-value="" data-target="#recurr" data-toggle="modal">
                            <?php echo ($this->event ? "Modifier..." : "Configurer...") ?>
                        </a>
                        <span id="recurr-humanreadable"><em><?php echo ($this->event ? '(' . $this->event->getRecurrence()->getHumanReadable().')' : '') ?></em></span>
                    </div>
                </div>
            <?php endif;?>
            <input name="recurrencepattern" type="hidden" value="<?php echo ($this->event && $this->event->getRecurrence() ? $this->event->getRecurrence()->getRecurrencePattern() : '') ?>">
            <input name="exclude" type="hidden" value="false">
            <div class="form-group">
                <?php echo $this->formLabel($this->form->get('status')->setLabelAttributes(array('class'=>'col-sm-2 control-label'))); ?>
                <div class="col-sm-8">
                    <?php
                    echo $this->formSelect($this->form->get('status')->setAttribute('class', 'form-control'));
                    ?>
                </div>
            </div>
        </div>


        <div role="tabpanel" class="tab-pane fade" id="description-tab">
            <div>
                <?php
                echo $this->formSelect($this->form->get('organisation')->setAttribute('class', 'unvisible'));
                echo "<div id=\"custom_fields\">";
                if($this->event || $this->model){
                    foreach ($this->form->get('custom_fields')->getElements() as $element){
                        echo $this->controlGroup($element, array('large' => true));
                    }
                }
                echo "</div>";
                echo "<div style=\"display:none;\">";
                echo $this->controlGroup($this->form->get('impact'));
                if($this->form->has('zonefilters')){
                    echo $this->controlGroup($this->form->get('zonefilters'));
                }
                echo "</div>";
                ?>
            </div>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="memos-tab">
            <?php
            $countalarm = 0;
            $mod = !$this->event || ($this->event && ($this->isGranted('events.write') || ($this->zfcUserIdentity() && $this->event->getAuthor()->getId() == $this->zfcUserIdentity()->getId())));

            if($mod) {
                echo "<a id=\"addalarm\" href=\"#add-alarm\" data-toggle=\"modal\" class=\"btn btn-sm btn-primary pull-right\"><span class=\"glyphicon glyphicon-plus\"></span> Créer un mémo</a>";
            }
            echo '<table class="table table-hover" id="alarm-table">';
            if($this->event || $this->model){
                $formatter = \IntlDateFormatter::create(
                    \Locale::getDefault(),
                    \IntlDateFormatter::FULL,
                    \IntlDateFormatter::FULL,
                    'UTC',
                    \IntlDateFormatter::GREGORIAN,
                    'HH:mm');
                $formatterLong = \IntlDateFormatter::create(
                    \Locale::getDefault(),
                    \IntlDateFormatter::FULL,
                    \IntlDateFormatter::FULL,
                    'UTC',
                    \IntlDateFormatter::GREGORIAN,
                    'd-MM-y HH:mm');
                $alarms = ($this->event ? $this->event->getChildren() : $this->model->getChildren());
                foreach($alarms as $child) {
                    if($child->getCategory() instanceof Application\Entity\AlarmCategory){
                        $countalarm++;
                        $now = new \DateTime();
                        $now->setTimezone(new \DateTimeZone("UTC"));
                        $deltabegin = "";
                        $deltaend = "";
                        foreach ($child->getCustomFieldsValues() as $value){
                            if($value->getCustomField()->getId() == $child->getCategory()->getDeltaBeginField()->getId()){
                                $deltabegin = $value->getValue();
                            }
                            if($value->getCustomField()->getId() == $child->getCategory()->getDeltaEndField()->getId()){
                                $deltaend = $value->getValue();
                            }
                            if($value->getCustomField()->getId() == $child->getCategory()->getTextfield()->getId()){
                                $alarmcomment = nl2br($value->getValue());
                            }
                        }
                        if($this->copy || $this->model) {
                            $timeAlert = clone $now;

                            //diff in minutes
                            $diff = 0;
                            if($this->copy && strlen(trim($deltabegin)) == 0 && strlen(trim($deltaend)) == 0){ //calculate delta relative to startdate

                                $diff = (int)(($child->getStartdate()->getTimestamp() - $this->event->getStartDate()->getTimestamp())/60);
                            } else {//use deltas
                                if(strlen(trim($deltaend)) > 0) {
                                    if($this->copy && $this->event->getEnddate() != null){
                                        $timeAlert = clone $this->event->getEnddate();
                                        $diff = $deltaend;
                                    } else {
                                        //pas d'heure de fin encore positionnée et alarme en fonction de la fin
                                        $timeAlert = -1;
                                    }
                                } else if(strlen(trim($deltabegin)) > 0) {
                                    if($this->copy){
                                        $timeAlert = clone $this->event->getStartdate();
                                    }
                                    $diff = $deltabegin;
                                }
                            }
                            if($timeAlert !== -1){ // -1 => impossible de calculer une heure
                                if($diff > 0) {
                                    $timeAlert->add(new \DateInterval('PT'.$diff.'M'));
                                } else {
                                    $invdiff = -$diff;
                                    $interval = new \DateInterval('PT'.$invdiff.'M');
                                    $interval->invert = 1;
                                    $timeAlert->add($interval);
                                }
                            }
                            echo '<tr><div class="fake-alarm" '
                                . 'data-alarm="fake-'.$countalarm.'"'
                                . 'id="alarm-fake-'.$countalarm.'">'
                                . '<input type="hidden" name="alarm['.$countalarm.'][date]" value="'.($timeAlert === -1 ? $formatterLong->format(new DateTime('now')): $formatterLong->format($timeAlert)).'">'
                                . '<input type="hidden" name="alarm['.$countalarm.'][name]" value="'.$this->eventName($child).'">'
                                . '<input type="hidden" name="alarm['.$countalarm.'][comment]" value="'.$alarmcomment.'">'
                                . '<input type="hidden" name="alarm['.$countalarm.'][deltabegin]" value="'.$deltabegin.'">'
                                . '<input type="hidden" name="alarm['.$countalarm.'][deltaend]" value="'.$deltaend.'">'
                                . '</div></tr>';

                            echo '<tr class="alarm-fake" data-id="fake-'.$countalarm.'"'
                                . 'data-deltabegin="'.$deltabegin.'" '
                                . 'data-deltaend="'.$deltaend.'" '
                                . '>'
                                . '<td><span class="glyphicon glyphicon-bell"></span></td>'
                                . '<td>'.($timeAlert === -1 ? "TDC" : $formatter->format($timeAlert)).'</td>'
                                . '<td>'.$this->eventName($child).'</td>'
                                . '<td><a class="delete-fake-alarm" href="#"><span class="glyphicon glyphicon-trash"></span></a></td>'
                                . '</tr>';

                        } else {
                            echo '<tr id="tr-'.$child->getId().'" data-id="'.$child->getId().'" '
                                . 'data-deltabegin="'.$deltabegin.'" '
                                . 'data-deltaend="'.$deltaend.'" '
                                .'>';
                            if($child->getStatus()->isOpen()){
                                if($child->getStartDate() < $now) {
                                    echo '<td><span class="glyphicon glyphicon-warning-sign"></span></td>';
                                } else {
                                    echo '<td><span class="glyphicon glyphicon-bell"></span></td>';
                                }
                            } elseif($child->getStatus()->getId() == 4) {
                                echo '<td><span class="glyphicon glyphicon-remove"></span></td>';
                            } else {
                                if($child->getStartDate() < $now) {
                                    echo '<td><span class="glyphicon glyphicon-ok"></span></td>';
                                } else {
                                    echo '<td><span class="glyphicon glyphicon-warning-sign"></span></td>';
                                }
                            }
                            $timeAlert = $formatter->format($child->getStartDate());
                            if(strlen(trim($deltaend)) > 0 && $this->event->getEnddate() == NULL){
                                $timeAlert = "TBC";
                            }
                            echo '<td>'.$timeAlert.'</td>';
                            echo '<td>'.$this->eventname($child).'</td>';
                            echo '<td><a class="modify-alarm" href="#add-alarm" data-toggle="modal"><span class="glyphicon glyphicon-pencil"></span></a> <a class="delete-alarm" href="#"><span class="glyphicon glyphicon-trash"></span></a></td>';
                            echo "</tr>";
                        }
                    }
                }
            }
            echo '</table>';
            ?>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="files-tab">
            <?php
            $countfiles = 0;
            $mod = false;
            if($this->zfcUserIdentity()){
                if($this->event) {
                    $mod = ($this->event->getAuthor()->getId() == $this->zfcUserIdentity()->getId()) || ($this->isGranted('events.write'));
                } else {
                    //pas de modification possible d'un modèle
                    $mod = false;
                }
            }
            //ajout de fichier si nouvel evt ou mod avec droits ok
            if(!$this->event || $this->model || ($this->event && $mod)){
                echo "<a id=\"addfile\" href=\"#add-file\" data-toggle=\"modal\" class=\"btn btn-sm btn-primary pull-right\"><span class=\"glyphicon glyphicon-plus\"></span> Ajouter un fichier</a>";
            }
            echo '<table class="table table-hover" id="file-table">';
            echo '<tbody>';
            if($this->event || $this->model){
                $files = null;
                if($this->event) {
                    $files = $this->event->getFiles();
                }
                if($this->model) {
                    $files = $this->model->getFiles();
                }

                if(count($files) > 0){
                    $countfiles = count($files);
                    //accéder aux fichiers

                    foreach ($files as $file){
                        echo "<tr id=\"file_".$file->getId()."\">";
                        echo "<td>".($file->getReference() ? "#".$file->getReference() : "N/A")."</td>";
                        echo "<td><a href=\"".$this->basePath().$file->getPath()."\" rel=\"external\">".
                            ($file->getName() ? $file->getname() : $file->getFilename())."</a></td>";
                        echo "<td>";
                        echo "<a href=\"".$this->basePath().$file->getPath()."\" rel=\"external\"><span class=\"glyphicon glyphicon-download\"></span></a>";
                        echo "</td>";
                        if($mod){//suppression d'un fichier possible si le fichier ne vient pas d'un modèle ou si droits ok
                            echo "<td>";
                            //TODO
                            //$html .= "<a href=\"#\"><i class=\"icon-pencil mod-file\"></i></a> ";
                            echo "<a href=\"#confirm-delete-file\"
									class=\"delete-file\"";
                            if($this->copy || $this->model) {
                                echo " data-href=\"".$this->url('application',
                                        array('controller'=>'events', 'action' => 'deletefile'),
                                        array('query'=>array('id'=>$file->getId())))."\"";
                            } else {
                                echo " data-href=\"".$this->url('application',
                                    array('controller'=>'events', 'action' => 'deletefile'),
                                    array('query'=>array('id'=>$file->getId(), 'eventid' => $event->getId())))."\"";
                            }

							echo 	" data-id=\"".$file->getId()."\"
									data-name=\"".($file->getName() ? $file->getname() : $file->getFilename())."\"
									data-toggle=\"modal\"
									><span class=\"glyphicon glyphicon-trash\"></span></a>";
                            echo "</td>";
                        }
                        echo "</tr>";
                        if($this->copy || $this->model){ //ajout de l'input caché pour enregistrement
                            echo '<tr><input type="hidden" name="fichiers['.$file->getId().']" value="'.$file->getId().'"></tr>';
                        }
                    }

                }

            }
            echo '</tbody>';
            echo '</table>';

            ?>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="actions-tab">
            <?php
            if($this->event || $this->model) {
                if($this->copy){
                    echo "<input type=\"hidden\" name=\"fromeventid\" value=\"".$this->copy."\">";
                }
                echo $this->partial('actions.phtml', array('actions' => $this->actions));

                if($this->model){
                    //ajout de la référence pour copie des actions lors de l'enregistrement
                    echo '<input name="modelid" type="hidden" value="'.$this->model->getId().'" >';
                }

            }
            ?>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="notes-tab">
            <?php
            if($this->event){
                //ajout de notes si droits ok
                if($mod){
                    echo "<a data-id=\"".$this->event->getId()."\" id=\"addnote\" href=\"#add-note-modal\" data-toggle=\"modal\" class=\"btn btn-sm btn-primary pull-right\"><span class=\"glyphicon glyphicon-plus\"></span>Ajouter une note</a>";
                }
                $formatterNote = \IntlDateFormatter::create(\Locale::getDefault(),
                    \IntlDateFormatter::FULL,
                    \IntlDateFormatter::FULL,
                    'UTC',
                    \IntlDateFormatter::GREGORIAN,
                    'dd LLL, HH:mm');
                echo '<div id="form-notes">';
                foreach ($this->event->getUpdates() as $update){
                    echo "<blockquote>"
                        . "<p><span class=\"note\" data-id=\"".$update->getId()."\">". nl2br($update->getText()) ."</span></p>"
                        . "<small>".$this->updateAuthor($update)." à ".$formatterNote->format($update->getCreatedOn())."</small>"
                        . "</blockquote>";
                }
                echo '</div>';
            }
            ?>
        </div>

    </div>

</div>
<!-- .modal-body -->
<div class="modal-footer">
    <div class="form-group">
        <div class="col-lg-6 col-lg-offset-6 btn-wrapper">
            <?php
            if($this->event || $this->model){
                echo $this->formSubmit($this->form->get('submit')->setAttributes(array('value'=> (($this->copy || $this->model) ? "Ajouter" : "Enregistrer"), 'class' => 'btn btn-primary')));
            } else {
                echo $this->formSubmit($this->form->get('submit')->setAttributes(array('disabled' => 'disabled', 'class' => 'btn btn-primary disabled')));
            }?>

            <button class="btn btn-default btn-raised" id="cancel-form">Annuler</button>
        </div>
    </div>
</div>
<?php echo $this->form()->closeTag(); ?>
